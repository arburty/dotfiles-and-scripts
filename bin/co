#!/bin/bash

# co     : Change Audio Output {{{1
# Author : Austin Burt
# Email  : austin@burt.us.com
# Date   : 04/23/20
#
# Toggle audo output between speakers and headphones.
# Will probably not work if I add 3rd device
#
# This was originally taken from:
#   https://forums.linuxmint.com/viewtopic.php?t=236439
#   "How to quickly switch sound output devices?"
# Really I barely kept anything but used it as a helpful template.
#
# The original author is unknown. Changed functionality from looping through
# outputs (in a hacky broken fashion) to just toggling the two I care about.
#
# Vim modeline defined at bottom.

[[ -z $PROGRAM ]] && declare -r PROGRAM=$(basename $0)
[[ -f $HOME/bin/colorValues ]] && source $HOME/bin/colorValues
# }}}1

# Set up Debugging flags and function to print variables. {{{1
[[ $1 == "-D" ]] && let DEBUG=0
[[ $DEBUG ]] && echo -e "${GREEN}::: DEBUGGING MODE :::${NC}"
[[ $DEBUG ]] && shift && echo -e "${GREEN}app flag: ${YELLOW}$1${NC}"

debug() {
    # Debug method to print variables more easily
    # if first argument is '-n' use a new line before printing
    # variable contents.
    if [[ $DEBUG ]]
    then
        [[ $1 == '-n' ]] && le="\n" && shift || le=" "
        echo -ne "${GREEN}${1}${NC}:$le"
        echo -e "${YELLOW}${2}${NC}"
    fi
} # }}}1

# Helper Functions {{{1
die() {
    [[ $DEBUG ]] && echo -e "${LIGHT_RED}ERROR: $PROGRAM:${NC} Line $BASH_LINENO: $*" >&2
    # Send a notification for using with mappings.  errorpic defined du to long image path.
    errorpic="$HOME/shared_drive/Pictures/Me-Random/VladislavThePoker/mpv-shot-Vladislav-Profile-Pics-03.jpg"
    notify-send -t 1000 -i $errorpic "ERROR: In $PROGRAM:" "$*"
    #notify-send $notif_flags "$notif_title" "DEFAULT => $outputDeviceName"
    exit 1
}

available_sinks=`pacmd list-sinks`
findDevice() {
    #[[ ! -z $2 ]] && second="-e $2"
    echo "$available_sinks" | grep -B 1 -e "$1" \
        | sed -n -e 's/\index:[[:space:]]\([[:digit:]]\)/\1/p'
}
# }}}1

# MAIN
# Find the indexes of the output devices {{{
# Start by defining a regex to find the device by name.
arctis_stereo="SteelSeries_Arctis_Pro_Wireless-00.stereo-game"
arctis_mono="SteelSeries_Arctis_Pro_Wireless-00.mono-chat"
lineout="analog-surround-[[:digit:]]\{2\}" # AKA 'line out'
lineout2="pci-0000_28_00.3.analog-stereo" # gnome and cinammon had different names. <- was the gnome version

# Find each device.
my_output_arctis_stereo=`findDevice "$arctis_stereo"`
my_output_arctis_mono=`findDevice "$arctis_mono"`
my_output_lineout=`findDevice "$lineout"`
[[ -z "$my_output_lineout" ]] && my_output_lineout=`findDevice $lineout2`

# Make sure we found a lineout device.
[[ -z "$my_output_lineout" ]] && die "No lineout device found."

# Get the arctis stereo output if available, otherwise use the mono
# Add one arctis device and the lineout device so only 2 outputs are in my_output_devices
[[ ! -z "$my_output_arctis_stereo" ]] && my_output_arctis="$my_output_arctis_stereo"
[[ -z "$my_output_arctis" ]] && [[ ! -z "$my_output_arctis_mono" ]] && my_output_arctis="$my_output_arctis_mono"
[[ -z "$my_output_arctis" ]] && die "No device found for Arctis Pro Wireless Headset"
my_output_devices=`echo -e "$my_output_arctis\n$my_output_lineout"`

# Get index of device not currently being used, and remove leading whitespace.
next_out=$(echo "$my_output_devices" | grep -v \* | head -n 1 | sed 's/^ *//g')
current_default=$(echo "$my_output_devices" | grep \* | sed 's/^ *\*[[:space:]]//g')

# Debug the variables used so far.
debug DEBUG $DEBUG
debug arctis_stereo "$arctis_stereo"
debug arctis_mono "$arctis_mono"
debug linout "$lineout"
debug linout2 "$lineout2"
debug my_output_arctis_stereo "$my_output_arctis_stereo"
debug my_output_arctis_mono "$my_output_arctis_mono"
debug my_output_arctis "$my_output_arctis"
debug my_output_lineout "$my_output_lineout"
debug -n "my_output_devices" "$my_output_devices"
debug next_out "$next_out"
debug current_default "$current_default"

# Quick check to see we have 2 devices.
# TODO: Could probably be removed now.
[[ $(echo -e "$my_output_devices" | wc -l) < 2 ]] && die "not enough devices found"
# }}}

# Is there a progam to swap instead of everthing. {{{
# -s flag only switches the spotify output device
# -m flag only switches the mpv output device
# -f flag only switches the firefox output device
case $1 in
    -s ) swapProgram="[Ss]potifyd\?" ;;
    -m ) swapProgram="mpv Media Player" ;;
    -f ) swapProgram="Firefox" ;;
    -q ) swapProgram="qutebrowser" ;;
esac
debug swapProgram "$swapProgram"

# notification flags and icon. Both sections need it.
notif_flags="-t 1000 -i $HOME/shared_drive/Pictures/Me/Matt-and-I-Ren-Fair.jpg"
notif_title="Sound output changed"

if [[ ! -z "$swapProgram" ]]
then
    # just needs the program name from list-sink-input
    appInfo=$(pacmd list-sink-inputs | grep -w -B 15 "$swapProgram")
    appIndex=$(echo "$appInfo" | sed -n -e 's/.*index:[[:space:]]\([[:digit:]]\)/\1/p')
    appSink=$(echo "$appInfo" | sed -n -e 's/[[:space:]]sink:[[:space:]]\([[:digit:]]\).*/\1/p' | head -n 1)

    debug appInfo "$appInfo"
    debug appIndex "$appIndex"
    debug appSink "$appSink"

    # if output is already switched from default, switch it back
    [[ $appSink == $next_out ]] && next_out=$current_default

    for i in $(echo $appIndex)
    do
        pacmd "move-sink-input $i $next_out"
    done

    # Send notification of audio switch
    applicationName=$(echo "$appInfo" | sed -n -e 's/.*application.name[[:space:]]=[[:space:]]"\(.*\)"/\1/p' | head -n 1)
    outputDeviceName=$(pacmd list-sinks | grep -A 65 "index: $next_out" | sed -n -e 's/.*active[[:space:]]port:[[:space:]]<\(.*\)>/\1/p')

    debug apllicationName "$apllicationName"
    debug outputDeviceName "$outputDeviceName"

    notify-send $notif_flags "$notif_title" "$applicationName => $outputDeviceName"

    exit 0
fi # }}}

# Was not for a specific program, switch all output and change default. {{{
#change the default sink
pacmd "set-default-sink ${next_out}"

#move all inputs to the new sink
for input in $(pacmd list-sink-inputs | sed -n -e 's/index:[[:space:]]\([[:digit:]]\)/\1/p');
do
    pacmd "move-sink-input $input $next_out"
done

# Send notification of audio switch
outputDeviceName=$(pacmd list-sinks | grep -A 65 "index: $next_out" | sed -n -e 's/.*active[[:space:]]port:[[:space:]]<\(.*\)>/\1/p')
debug outputDeviceName "$outputDeviceName"
notify-send $notif_flags "$notif_title" "DEFAULT => $outputDeviceName"

# }}}

exit 0

# Modeline {{{
# vim: set foldmarker={{{,}}} foldlevel=0 foldmethod=marker:}}}
