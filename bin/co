#!/bin/bash

# co     : Change Audio Output {{{1
# Author : Austin Burt
# Email  : austin@burt.us.com
# Date   : 04/23/20
#
# Toggle audo output between speakers and headphones.
# Will probably not work if I add 3rd device
#
# This was originally taken from:
#   https://forums.linuxmint.com/viewtopic.php?t=236439
#   "How to quickly switch sound output devices?"
# Really I barely kept anything but used it as a helpful template.
#
# The original author is unknown. Changed functionality from looping through
# outputs (in a hacky broken fashion) to just toggling the two I care about.
#
# Vim modeline defined at bottom.
# }}}1

# Find the indexes of the output devices {{{
# Grab the output indexes I want to use. My headphones and stereo.
arctis="SteelSeries_Arctis_Pro_Wireless-00.stereo-game"
lineout="analog-surround-40" # AKA 'line out'
lineout2="pci-0000_28_00.3.analog-stereo" # gnome and cinammon had different names. <- was the gnome version
my_output_devices=`pacmd list-sinks | grep -B 1 -e $arctis -e $lineout -e $lineout2 | sed -n -e 's/\index:[[:space:]]\([[:digit:]]\)/\1/p'`

# Get index of device not currently being used, and remove leading whitespace.
next_out=$(echo "$my_output_devices" | grep -v \* | head -n 1 | sed 's/^ *//g')
current_default=$(echo "$my_output_devices" | grep \* | sed 's/^ *\*[[:space:]]//g')

# notification flags and icon
notif_flags="-t 1000 -i $HOME/shared_drive/Pictures/Me/Matt-and-I-Ren-Fair.jpg"
notif_title="Sound output changed"
# }}}

# Is there a progam to swap instead of everthing. {{{
# -s flag only switches the spotify output device
# -m flag only switches the mpv output device
# -f flag only switches the firefox output device
case $1 in
    -s ) swapProgram="[Ss]potifyd\?" ;;
    -m ) swapProgram="mpv Media Player" ;;
    -f ) swapProgram="Firefox" ;;
    -q ) swapProgram="qutebrowser" ;;
esac

if [[ ! -z "$swapProgram" ]]
then
    # just needs the program name from list-sink-input
    appInfo=$(pacmd list-sink-inputs | grep -w -B 15 "$swapProgram")
    appIndex=$(echo "$appInfo" | sed -n -e 's/.*index:[[:space:]]\([[:digit:]]\)/\1/p')
    appSink=$(echo "$appInfo" | sed -n -e 's/[[:space:]]sink:[[:space:]]\([[:digit:]]\).*/\1/p' | head -n 1)

    # if output is already switched from default, switch it back
    [[ $appSink == $next_out ]] && next_out=$current_default

    for i in $(echo $appIndex)
    do
        pacmd "move-sink-input $i $next_out"
    done

    # Send notification of audio switch
    applicationName=$(echo "$appInfo" | sed -n -e 's/.*application.name[[:space:]]=[[:space:]]"\(.*\)"/\1/p' | head -n 1)
    outputDeviceName=$(pacmd list-sinks | grep -A 65 "index: $next_out" | sed -n -e 's/.*active[[:space:]]port:[[:space:]]<\(.*\)>/\1/p')
    notify-send $notif_flags "$notif_title" "$applicationName => $outputDeviceName"

    exit 0
fi # }}}

# Was not for a specific program, switch all output and change default. {{{
#change the default sink
pacmd "set-default-sink ${next_out}"

#move all inputs to the new sink
for input in $(pacmd list-sink-inputs | sed -n -e 's/index:[[:space:]]\([[:digit:]]\)/\1/p');
do
    pacmd "move-sink-input $input $next_out"
done

# Send notification of audio switch
outputDeviceName=$(pacmd list-sinks | grep -A 65 "index: $next_out" | sed -n -e 's/.*active[[:space:]]port:[[:space:]]<\(.*\)>/\1/p')
notify-send $notif_flags "$notif_title" "DEFAULT => $outputDeviceName"

# }}}

exit 0

# Modeline {{{
# vim: set foldmarker={{{,}}} foldlevel=0 foldmethod=marker:}}}
