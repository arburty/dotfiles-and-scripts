#! /bin/bash

# desc
# Author : Austin Burt
# Email  : austin@burt.us.com
# Date   : 5/23/19

# Declare Variables
declare -r PROGRAM=$(basename $0)
source $HOME/bin/colorValues
declare -r branchFile="$HOME/git/branchnames"
declare -r backup="$HOME/notes/branchnamesbackup"
declare -r backup2="$HOME/notes/branchnamesbackup2"
declare -r myBranch=$(git mybr 2> /dev/null)
declare -r cleanedBranches="$HOME/notes/cleanedbranchnames"
exitCode=0

die() {
    echo "ERROR: $PROGRAM: Line $BASH_LINENO: $*" >&2
    exit 1
}

USAGE() {
  echo -e "$(cat << __EOF__
${LIGHT_PURPLE}USAGE${NC}
${BLUE}DESCRIPTION:${NC}
Create descriptions for a git branch branch. By default the current one is used.
Descriptions live in ${GREEN}$branchFile.${NC}
${WHITE}desc [flag] <description>${NC}
${BLUE}FLAGS:${NC}
${YELLOW}-n:${NC} give a different branch a name
      ${WHITE}desc -n <branchname> <description>${NC}
${YELLOW}-c:${NC} clean up the file holding descriptions. It leaves the most recent one
    it moves the removed lines from the description file,
    to ${GREEN}$cleanedBranches.${NC}
    'searchTerm' defaults to current branch.
      ${WHITE}desc -c [searchTerm]${NC}
${YELLOW}-rm:${NC} helps clean the file like -c but it does not leave the most recent description
      ${WHITE}desc -rm [searchTerm]${NC}
${YELLOW}-l:${NC} list the lines in $branchFile bases on searchTerm
      ${WHITE}desc -l [searchTerm]${NC}
${YELLOW}-la:${NC} list every description in $branchFile
      ${WHITE}desc -la${NC} 
${YELLOW}-u:${NC} Undo. copies the backup file in $backup
    back into the descripion file.
__EOF__
)"
    exit 0
}

# Call USAGE If Needed
[[ ! -z $1 ]] || USAGE
#[[ "$1" == "-h" ]] && USAGE
#[[ "$1" == "--help" ]] && USAGE

checkValidBranchAndGit() {
    [[ ! -z $myBranch ]] || die "Not in a git repo."
    [[ $myBranch == "master" ]] && die "Can't give master a description"
}

new() {
    branchName=$myBranch
    desc=$@
    echo "making description: $desc, for branch: $branchName"
    echo "$myBranch $@" >> $branchFile
}

newName() {
    branchName=$1; shift
    desc=$@
    echo "making description: $desc, for branch: $branchName"
    echo "$branchName $@" >> $branchFile
}

remove() {
    [[ ! -z $1 ]] || die "no string given to remove"
    string=$1
    tmpFile="/tmp/uniqName"
    cat $branchFile | grep -v -e "$string" > $tmpFile
    cp $tmpFile $branchFile
}

clean() {
    cleanUpBranch=$myBranch
    [[ ! -z $1 ]] && cleanUpBranch=$1
    count=$(cat $branchFile | grep -e "$cleanUpBranch" | wc -l)

    if [[ $count -le 1 ]]
    then
        return
    fi

    cat $branchFile | grep -e "$cleanUpBranch"
    list=$(cat $branchFile | grep -e "$cleanUpBranch")
    ((count--))
    echo "$list" | head -n $count >> $cleanedBranches
    save=$(echo "$list" | tail -n 1)

    remove $cleanUpBranch
    echo "$save" >> $branchFile
}

listAll() {
    searchTerm=$myBranch
    [[ ! -z $1 ]] && searchTerm=$1
    lines=$(cat $branchFile | grep -e "$searchTerm")
    count=$(echo "$lines" | wc -l)

    if [[ $count -ge 1 && ! -z "$lines" ]]
    then
        echo $lines
      else
        exitCode=2
    fi
}

backup() {
    [[ ! -f $backup ]] && cp $backup $backup2
    cp $branchFile $backup
}

main() {
    case $1 in
        "-l" ) # uses a search term
            shift
            listAll "$1"
            ;;
        "-la" )
            cat $branchFile
            ;;
        "-c" )
            backup
            shift
            clean "$@"
            ;;
        "-rm" )
            backup
            shift
            remove "$@"
            ;;
        "-n" )
            # checkValidBranchAndGit
            backup
            shift
            newName "$@"
            ;;
        "-u" )
            cp $backup $branchFile
            cp $backup2 $backup
            ;;
        "--help" | "-h" )
            USAGE
        ;;
        * )
            checkValidBranchAndGit
            new "$@"
    esac
}

main "$@"

exit $exitCode
