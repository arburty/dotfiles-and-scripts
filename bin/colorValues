#! /bin/zsh

# ColorValues
# Author : Austin Burt
# Email  : austin@burt.us.com
# Date   : 8/07/19

# This script is mosty used to be sourced from shell startup or in scripts wanting to use color,
# It also defines the rainbow function.

[[ -z $PROGRAM ]] && declare -r PROGRAM=$(basename $0) # if not sourced declare the program name
declare -r PROGRAM_PATH="$HOME/bin/$PROGRAM"

declareColors() {
    declare -rg BLACK='\033[0;30m'
    declare -rg RED='\033[0;31m'
    declare -rg GREEN='\033[0;32m'
    declare -rg DARK_GRAY='\033[1;30m'
    declare -rg LIGHT_RED='\033[1;31m'
    declare -rg LIGHT_GREEN='\033[1;32m'
    declare -rg BROWN_ORANGE='\033[0;33m'
    declare -rg YELLOW='\033[1;33m'
    declare -rg BLUE='\033[0;34m'
    declare -rg LIGHT_BLUE='\033[1;34m'
    declare -rg PURPLE='\033[0;35m'
    declare -rg LIGHT_PURPLE='\033[1;35m'
    declare -rg CYAN='\033[0;36m'
    declare -rg LIGHT_CYAN='\033[1;36m'
    declare -rg LIGHT_GRAY='\033[0;37m'
    declare -rg WHITE='\033[1;37m'
    declare -rg NC='\033[0m' # No Color

    declare -g COLORARRAY[1]=$RED
    declare -g COLORARRAY[2]=$GREEN
    declare -g COLORARRAY[3]=$LIGHT_BLUE
    declare -g COLORARRAY[4]=$PURPLE
    declare -g COLORARRAY[5]=$BROWN_ORANGE
    declare -g COLORARRAY[6]=$CYAN
    declare -g COLORARRAY[7]=$YELLOW
}

printColors() {
    echo -e "Default ${BLACK}black${NC} << black"
    echo -e "Default ${RED}Red${NC}"
    echo -e "Default ${LIGHT_RED}light red${NC}"
    echo -e "Default ${GREEN}Green${NC}"
    echo -e "Default ${LIGHT_GREEN}light green${NC}"
    echo -e "Default ${DARK_GRAY}dark gray${NC}"
    echo -e "Default ${LIGHT_GRAY}light gray${NC}"
    echo -e "Default ${WHITE}white${NC}"
    echo -e "Default ${BROWN_ORANGE}brown_orange${NC}"
    echo -e "Default ${YELLOW}yellow${NC}"
    echo -e "Default ${BLUE}blue${NC}"
    echo -e "Default ${LIGHT_BLUE}light blue${NC}"
    echo -e "Default ${CYAN}cyan${NC}"
    echo -e "Default ${lIGHT_CYAN}light cyan${NC}"
    echo -e "Default ${PURPLE}purple${NC}"
    echo -e "Default ${LIGHT_PURPLE}light purple${NC}"
    shift
}

rainbowLine() {
    offset=$(($RANDOM%7))
    LINE="$@"

    # loop through every character and print it in a different color
    for (( i=0; i<${#LINE}; i++ )); do
        char=${LINE:$i:1}
        echo -ne "${COLORARRAY[(((($offset+$i))%7))]}${char}"
    done
    echo -ne "${NC}"
}

# Print text in alternating colors. For pretty, not functionality.
# A sourced function and can be used like a command
# Can take file(s), argument(s), or STDIN as text
rainbow() {
    # Decide if arguments are STDIN, files, or the text to colorize
    if [ $# = 0 ]
    then
        # No arguments, so use STDIN
        DEFAULT_INPUT=/dev/stdin
    else
        # Not STDIN
        # if the first arg is a file they must all be files
        # a crude assumption but works well enough
        if [[ -f $1 ]]
        then
            DEFAULT_INPUT="$@"
        else
            # Arguments are the text to be colorized
            # Pass them straight to rainbowLine
            rainbowLine "$@"
            echo
            return 0
        fi
    fi


    # Iterates over all file parameters (/dev/stdin or command line args)
    # Using awk to iterate every line and pass it back to rainbowLine
    quote="'" # to help send single quoted text to bash function inside awk
    for FILE in $(echo $DEFAULT_INPUT)
    do
        awk '{ \
            # a is a string that executes a call to rainbowLine in colorValues
            # with each line of the file
            a="'$PROGRAM_PATH'" " -rl " "'$quote'"$0"'$quote'"; \
            system(a); \
            print ""}' "$FILE"
    done
    echo -en "${NC}"

    return 0
}

# Main
# 'arraysize' used to determine if the read only variables are already declared
arraysize=${#COLORARRAY[@]}
[[ $arraysize -eq 0 ]] && declareColors
[[ $1 == "-p" ]]       && printColors
[[ $1 == "-r" ]]       && shift         && rainbow "$@"
[[ $1 == "-rl" ]]      && shift         && rainbowLine "$@" && exit 0

return 0
