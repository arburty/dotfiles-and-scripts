[user]
	name = arburty
	email = austin@burt.us.com
[core]
	editor = nvim
[alias]
	# https://haacked.com/archive/2014/07/28/github-flow-aliases/
    # [ec - bdone] came from ^. use as a reference point

    # shorthand aliases
	co  = checkout
    br  = branch
    st  = status
    ss  = status -s
    sb  = !git status && git branch
    ssb = !git status -s && git names

    # print the current directory, or add it to xargs command.
    # ex. git mybr -I{} echo "this seems to be {}, but we'll see."
    mybr   = "!f() { git branch | grep ^[*] | cut -d ' ' -f 2 | xargs $@; }; f"
    # Without a new line char.
    mybrnn = "!f() { git mybr | tr -d '\n'; }; f"
    # copy to clipboard
    mybrcp = "!f() { git mybrnn | pbcopy; }; f"

    po     = !git branch | grep ^[*] | cut -d ' ' -f 2 | xargs git push origin
    posu   = !git branch | grep ^[*] | cut -d ' ' -f 2 | xargs git push origin --set-upstream
    names  = !gitBranchNames
    desc   = "!f() { desc "$@"; }; f"

    # new branch or merging fresh master back in
    start   = "!f() { git co ${2-master} && git up && git cob $1; }; f"
    refresh = "!f() { me=$(git mybrnn); git co ${1-master} && git up && git co $me && git merge ${1-master}; }; f"

    # Other
    difflastcm = diff HEAD^ HEAD
    diffstaged = diff --staged
      # diff HEAD; i think finds all changes

    # Log outputs
    # single line, pretty
    l1 = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
    # includes graphs when needed
    l2 = log --graph --oneline --decorate --all
    # does a search with grep on one liners
    l3 = !git log --oneline | grep
    # only last commit
    l4 = log -p -1

    # from haacked.com blog
    ec     = config --global -e
    up     = "!f() { git pull --rebase $@ && git submodule update --init --recursive; }; f"
    cob    = checkout -b
    cm     = !git add -A && git commit -m
    save   = !git add -A && git commit -m 'SAVEPOINT'
    wip    = commit -am "WIP"
    undo   = reset HEAD~1 --mixed
    resetorigin = "!f() { git fetch origin && git reset --hard origin/master && git clean -f -d; }; f"
    amend  = commit -a --amend
    #wipe  = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
    wipe   = "!f() { rev=$(git rev-parse ${1-HEAD}); git add -A && git commit --allow-empty -qm 'WIPE SAVEPOINT' && git reset $rev --hard; }; f"
    bclean = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs git branch -d; }; f"
    bdone  = "!f() { git checkout ${1-master} && git up && git bclean ${1-master}; }; f"
    lucky  = "!f() { git branch | grep -i " $1 " | head -1 | xargs git checkout;  }; f"
[push]
	default = simple
#[init]
#	templatedir = ~/.git_template
